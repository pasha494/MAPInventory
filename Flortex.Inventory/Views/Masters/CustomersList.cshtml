@using MAP.Inventory.Model;
@{
    string Data = "[]";

    if (ViewBag.Data != "")
    {
        Data = ViewBag.Data;
    }

    SessionManager objSession = null;
    if (Session["SessionManager"] != null)
    {
        objSession = (SessionManager)Session["SessionManager"];
    }
}

<form class="cmxform" role="search">
    <div class="row-fluid heading">
        <div class="span12">
            <h2>List of Customers</h2>
        </div>
    </div>
    <div class="row-fluid">
        <div class="col-lg-12 span12">
            <div id="grid"></div>
        </div>
    </div>
</form>

<script id="template" type="text/x-kendo-template">
    @if (objSession.RoleFeatures != null && objSession.RoleFeatures.ContainsKey("AddCustomers") && objSession.RoleFeatures["AddCustomers"])
    {
        <a class="k-button" onclick="return toolbar_click()">ADD NEW CUSTOMER</a>
    }
</script>

<script type="text/javascript">

    var Documents = @Html.Raw(Data)
    $(document).ready(function () {

        // Documents = getDocs();
        function getDocs() {
            $.ajax({
                url: '/Masters/Getcustomers',
                type: 'Get',
                async: false,
                success: function (res) {
                    Documents = JSON.parse(res);
                },
                error: function (e) { customAlert('error occured.', 'alert'); }
            });
            return Documents;
        }

        var dataSource = new kendo.data.DataSource({
            //pageSize: 8,
            data: Documents,
            autoSync: true,
            schema: {
                model: {
                    fields: {
                        NodeNo: { editable: false },
                        FirstName: { type: "string", editable: false },
                        LastName: { type: "string", editable: false },
                        Mobile: { type: "string", editable: false },
                    }
                }
            }
        });

        function gridDataBound(e) {
            var grid = e.sender;
            if (grid.dataSource.total() == 0) {
                var colCount = grid.columns.length;
                $(e.sender.wrapper)
                    .find('tbody')
                    .append('<tr class="kendo-data-row"><td colspan="' + colCount + '" class="no-data">No Data :( <br/>Add new <b>Warehouse<b></td></tr>');
            }
        };

        $("#grid").kendoGrid({
            dataSource: dataSource,
            pageable: false,
            //pageSize: 8,
            height: 500,
            sortable: true,
            filterable: true,
            toolbar: [
     { template: kendo.template($("#template").html()) }
            ],
            columns: [
                // { field: "id", title: "Doc No", width: "100px" },
                { field: "FirstName", title: "First Name", width: "130px" },
                { field: "LastName", title: "Last Name", width: "130px" },
                 { field: "Mobile", title: "Mobile", width: "130px" }
                  @if (objSession.RoleFeatures != null && objSession.RoleFeatures.ContainsKey("EditCustomers") && objSession.RoleFeatures["EditCustomers"])
                  {
                        <text>, { command: { text: "Edit", name: "edit", click: onEdit }, title: " ", width: "100px" } </text>
                  }

                   @if (objSession.RoleFeatures != null && objSession.RoleFeatures.ContainsKey("DeleteCustomers") && objSession.RoleFeatures["DeleteCustomers"])
                   {
               <text>, {
                       command: {
                           name: "Delete ", click: function (e) {
                               e.preventDefault();
                               var self = this;

                               smoke.confirm("Are you sure, Do you want to delete.?", function (ev) {
                                   if (ev) {
                                       var tr = $(e.target).closest("tr");
                                       var data = self.dataItem(tr);
                                       $.ajax({
                                           url: '/Masters/DeleteCustomer',
                                           type: 'POST',
                                           data: { "ID": data.NodeNo },
                                           beforeSend: function () {
                                               $("#ajaxLoadingImg").show();
                                           },
                                           complete: function () { $("#ajaxLoadingImg").hide(); },
                                           success: function (res) {
                                               if (res > 0) {
                                                   customAlert('Deleted Successfully.', 'alert');
                                                   Documents = getDocs();
                                                   var dataSource = new kendo.data.DataSource({ data: Documents });
                                                   var grid = $('#grid').data("kendoGrid");
                                                   dataSource.read();
                                                   grid.setDataSource(dataSource);
                                               }
                                           },
                                           error: function (e) { customAlert('error occured.', 'alert'); }
                                       });//end ajax
                                   }
                               }, {
                                   ok: "Yep",
                                   cancel: "Nope",
                                   classname: "custom-class",
                                   reverseButtons: true
                               });
                           }

                       }, title: " ", width: "100px"
                   }</text>
                       }
            ],
            editable: true,
            filterable: {
                extra: false, //do not show extra filters
                operators: { // redefine the string operators
                    string: {
                        contains: "Contains",
                        startswith: "Starts With",
                        eq: "Is Equal To"
                    }
                }
            },
            dataBound: gridDataBound
        });
    });
    Mousetrap.bind(['ctrl+a'], function (e) {
        e.preventDefault();
        toolbar_click();
    });

    function toolbar_click() {
        window.location.href = '/Masters/AddCustomer';
    }

    function onEdit(e) {
        e.preventDefault();
        var tr = $(e.target).closest("tr");
        var data = this.dataItem(tr);
        window.location.href = "/Masters/UpdateCustomer?ID=" + data.NodeNo;
    }


</script>
