@model MAP.Inventory.ModelImple.InwardDocumentImple
@using System.Data;
@using MAP.Inventory.Web.Models;
@{


}

<link rel="stylesheet" href="~/Content/SlickGrid/slick.grid.css" type="text/css" />
<link rel="stylesheet" href="~/Content/SlickGrid/css/smoothness/jquery-ui-1.8.16.custom.css" type="text/css" />
<link href="~/Content/SlickGrid/css/examples.css" rel="stylesheet" />

<script src="~/Content/SlickGrid/lib/jquery-ui-1.8.16.custom.min.js"></script>
<script src="~/Content/SlickGrid/lib/jquery.event.drag-2.2.js"></script>
<script src="~/Content/SlickGrid/slick.core.js"></script>
<script src="~/Content/SlickGrid/slick.formatters.js"></script>
<script src="~/Content/SlickGrid/slick.editors.js"></script>
<script src="~/Content/SlickGrid/plugins/slick.rowselectionmodel.js"></script>
<script src="~/Content/SlickGrid/slick.grid.js"></script>
<script src="~/Content/SlickGrid/slick.dataview.js"></script>
<script src="~/Scripts/math.min.js"></script>
<script src="~/Content/SlickGrid/slick.validator.js"></script>
<script src="~/Scripts/inventory-documents.js"></script>

<form class="cmxform" role="search" id="frmInwardStock" style="padding: 0px 50px 0px 0px;">
    @Html.HiddenFor(m => m.DocID)

    <div class="row-fluid heading">
        <div class="span12">
            @if (Model.DocID == 0)
            {
                <h2 class="pull-left">Add Inward Stocks  </h2>
            }
            else if (Model.DocID > 0)
            {
                <h2 class="pull-left">Update Inward Stocks  </h2>
            }

            <div class="pull-right">
                <a id="btnSave" class="btn btn-default">Save</a>
                <a id="btnNew" class="btn btn-default">New</a>
                <a id="btnPrev" class="btn btn-default">Previous</a>
                <a id="btnNext" class="btn btn-default">Next</a>
                <a id="btnBack" class="btn btn-default">Back to Documents</a>
            </div>

        </div>

    </div>

    <div class="row-fluid">
        <div class="span4">
            <div class="row-fluid">
                <div class="span3">
                    <label for="txtDocName" class="label">Doc Name</label>
                </div>
                <div class="span9">
                    <input type="text" class="form-control mousetrap" readonly="readonly" name="txtDocName" id="txtDocName" placeholder="Doc Name.." value="@Model.DocName">
                </div>
            </div>
        </div>
        <div class="span4">
            <div class="row-fluid">
                <div class="span3">
                    <label for="dtDate" class="label">Doc Date</label>
                </div>
                <div class="span9">
                    @if (Model.DocID == 0)
                    {
                        <input id="dtDate" placeholder="Date" class="mousetrap">
                    }
                    else if (Model.DocID > 0)
                    {
                        <input id="dtDate" placeholder="Date" class="mousetrap" value="@Model.DocDate">
                    }

                </div>
            </div>
        </div>
        <div class="span4">
            <div class="row-fluid">
                <div class="span3">
                    <label for="drpWarehouse" class="label">Warehouse</label>
                </div>
                <div class="span9">
                    <input id="drpWarehouse" name="drpWarehouse" class="mousetrap" />
                </div>
            </div>

        </div>
    </div>

    <div class="row-fluid">
        <div class="span4">
            <div class="row-fluid">
                <div class="span3">
                    <label for="drpVendor" class="label">Vendor Name</label>
                </div>
                <div class="span9">
                    <input id="drpVendor" name="drpVendor" class="mousetrap" />
                </div>
            </div>
        </div>

        <div class="span4">
            <div class="row-fluid">
                <div class="span3">
                    <label for="txtComments" class="label">Expected Date </label>
                </div>
                <div class="span9">
                    <div class="row-fluid">
                        <div class="span6">
                            @if (Model.DocID > 0 && Model.IsExpected)
                            {
                                <input type="checkbox" class="mousetrap" name="chkShedule" id="chkShedule" checked="checked">
                            }
                            else
                            {
                                <input type="checkbox" class="mousetrap" name="chkShedule" id="chkShedule">
                            }
                        </div>
                        @if (Model.DocID > 0 && Model.IsExpected)
                        {
                            <div class="span6">
                                <div id="divSheduled">
                                    <input id="dtExpDate" type="text" value="@Model.EffectiveDate" placeholder="Date" class="pull-right mousetrap">
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="span6">
                                <div id="divSheduled">
                                    <input id="dtExpDate" type="text" placeholder="Date" class="pull-right mousetrap">
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="span4">
            <div class="row-fluid">
                <div class="span3">
                    <label for="txtComments" class="label">Remarks </label>
                </div>
                <div class="span9">
                    <input type="text" class="form-control mousetrap" name="txtComments" id="txtComments" placeholder="Comments.." value="@Model.Comments">
                </div>
            </div>
        </div>
    </div>

    <div class="row-fluid">
        <div class="span12 ">
            <div class="row-fluid">
                <div class="span12 ">
                    <div id="grid" style="width:100%;height:@(Model.GridView.Height)px;"></div>
                </div>
            </div>

        </div>
    </div>


</form>

<script>
    
    $(document).ready(function () {
        debugger
        var EndDate = '';

        $("#dtDate").kendoDatePicker({ format: "dd-MM-yyyy" });
        // $("#dtDate").val(getDate());

        $("#dtExpDate").kendoDatePicker({ format: "dd-MM-yyyy" });
        // $("#dtExpDate").val(getDate());

        $(".k-datepicker").css("width", "196px");

        function getDate() {
            var date = new Date();
            return date.getDate() + "-" + parseInt(date.getMonth() + 1) + "-" + date.getFullYear()
        }


        @*var _warehouseChange=function(newValue, oldValue) {
             
            if ('@Model.DocID' > 0 && oldValue) {
                smoke.confirm("Existing product list will gets cleared. Do you wanto to proceed?", function (ev) {
                    if (ev) {
                        // Invalidate the rows
                        grid.invalidateAllRows();
                        initGridData(GetEmptyRows([]));
                    }
                    else  {
                        //$("#drpWarehouse").combogrid('setValue',oldValue);
                    }
                }, {
                    ok: "Yep",
                    cancel: "Nope",
                    classname: "custom-class",
                    reverseButtons: true
                });
            }
        }*@

        var warehouseOptions=@Html.Raw(Model.WareHouseOptions);

        //-----gets the warehouse data in the autocomplete list
        $("#drpWarehouse").combogrid(warehouseOptions);

        $("#drpVendor").combogrid(@Html.Raw(Model.VendorOptions));

        var data = [];

        if ($('#chkShedule').is(":checked")) {
            $("#divSheduled").show();
        }
        else {
            $("#divSheduled").hide();
        }

        $('#chkShedule').on("click", function (e) {
            $('#chkShedule').is(":checked") ? $("#divSheduled").show() : $("#divSheduled").hide();
        });


        // slick grid variables declaration
        var dataView;
        var grid;

        var planeColumns=@Html.Raw(Model.GridView.Columns);
        var editorOptions= @Html.Raw(Model.ProductsOptions);

        var slickColumnParser=new InventoryDocs.ParseToSlickColumns(planeColumns,editorOptions);

        var columns = slickColumnParser.getOptions("slickcolumns");

        // Add empty rows to the grid
        var GetEmptyRows = function (data) {
            var _data = data;
            for (var i = _data.length; i < @(Model.GridView.TotalRows); i++) {
                var obj = {};
                obj.id = i + 1;
                obj.sno = i + 1;
                obj.pid = "";
                obj.pcode = "";
                obj.pname = "";
                obj.quantity = "";
                obj.price = "";
                obj.discount = "";
                obj.totalPrice = "";
                _data.push(obj);
            }
            return _data;
        }

        var slickData = GetEmptyRows([]);

        var options = {
            editable: true,
            enableAddRow: true,
            enableCellNavigation: true,
            forceFitColumns: false,
            topPanelHeight: 50,
            showHeaderRow: true,
            Warehouse: 0
        };

        function decimalFieldValidator(value) {
            if (value == null || value == undefined || !value.length || !$.isNumeric(value)) {
                return {valid: false, msg: "This is a required field"};
            }
            else {
                return {valid: true, msg: null};
            }
        }


        dataView = new Slick.Data.DataView({ inlineFilters: true });
        grid = new Slick.Grid("#grid", dataView, columns, options);
        grid.setSelectionModel(new Slick.RowSelectionModel());


        grid.onCellChange.subscribe(function (e, args) {

            _.each(args.grid.getColumns(),function(col){

                // if the decimal field is empty then make it zero
                if(col.isDecimal)  {
                    if(args.item[col.id] == undefined || args.item[col.id] =="")
                        args.item[col.id]=0;
                }

                // evaluate the formula
                if(col.formula)  {
                    args.item[col.id]=math.eval(col.formula,args.item);
                }
            });

            dataView.updateItem(args.item.id, args.item);
        });

        grid.onBeforeEditCell.subscribe(function (e, args) {
            if (!validateHeaderFields())
                return false;
            else
            {
                grid.setWareHouse($("#drpWarehouse").combogrid('getValue'));
            }
        });

        grid.onAddNewRow.subscribe(function (e, args) {
            var obj = {};
            obj.id =  dataView.getLength() + 1;
            obj.sno =dataView.getLength() + 1;
            obj.pid = "";
            obj.pcode = "";
            obj.pname = "";
            obj.quantity = "";
            obj.price = "";
            obj.discount = "";
            obj.totalPrice = "";

            //$.extend(obj, args.item);
            dataView.addItem(obj);
        });

        grid.onKeyDown.subscribe(function (e, args) {
            // select all rows on ctrl-a
            if (e.which == 40 || e.which == 38) {
                if (columns && columns[args.cell] && columns[args.cell].stopDownkey) {
                    e.stopImmediatePropagation();
                }
            }
        });

        // wire up model events to drive the grid
        dataView.onRowCountChanged.subscribe(function (e, args) {
            grid.updateRowCount();
            grid.render();
        });

        dataView.onRowsChanged.subscribe(function (e, args) {
            grid.invalidateRows(args.rows);
            grid.render();
        });

        function initGridData(_data){

            // initialize the model after all the events have been hooked up
            _.each(_data,function(item){
                if( item.pid != "" && item.pcode != "" && item.pname != "" && item.quantity != "" && item.quantity != 0 && item.price != "" && item.price != 0) {
                    _.each(columns,function(col){
                        if(col.formula)  {
                            item[col.id]=math.eval(col.formula,item);
                        }
                    });
                }
            });

            dataView.beginUpdate();
            dataView.setItems(_data);
            dataView.endUpdate();
            grid.render();
        };

        // if you don't want the items that are not visible (due to being filtered out
        // or being on a different page) to stay selected, pass 'false' to the second arg
        dataView.syncGridSelection(grid, true);


        var validateHeaderFields = function () {
            var flag = true;
            if ($("#dtDate").val() == "") {
                customAlert('Please select Date', 'alert');
                $("#dtDate").focus();
                return false;
            }
            else if ($("#drpWarehouse").combogrid('getValue') == "" || $("#drpWarehouse").combogrid('getText') == "") {
                customAlert('Please select Warehouse', 'alert');
                $("#drpWarehouse").focus();
                return false;
            }
            else if ($("#drpVendor").combogrid('getValue') == "" || $("#drpVendor").combogrid('getText') == "") {
                customAlert('Please select Vendor', 'alert');
                $("#drpVendor").focus();
                return false;
            }
            else if ($('#chkShedule').is(":checked") && $("#dtExpDate").val() == '') {
                customAlert('Please select Sheduled date.', 'alert');
                $("#dtExpDate").focus();
                return false;
            }
            return flag;
        };




        // @@ToDo Edit data
        if ('@Model.DocID' > 0) {
            $("#drpWarehouse").combogrid('disable');
            $("#drpWarehouse").combogrid('setValue','@Model.WareHouseId');
            $("#drpWarehouse").combogrid('setText','@Model.WareHouseName');

            $("#drpVendor").combogrid('setValue','@Model.VendorId'); 
            $("#drpVendor").combogrid('setText','@Model.VendorName');
            
            var jsonData =$.parseJSON( '@Html.Raw(Model.GridData)');
            initGridData(GetEmptyRows(jsonData));

        }
        else {
            $("#dtDate").val(getDate());
            initGridData(slickData);
        }

        // Refresh the document and make it a new one
        var refreshAsNewDoc = function () {

            $("#DocID").val(0);
            $("#drpWarehouse").combogrid('setValue', '');
            $("#drpVendor").combogrid('setValue', '');
            $("#dtDate").val(getDate());
            $("#dtExpDate").val(getDate());
            $("#chkShedule").removeAttr("checked");
            $("#divSheduled").hide();
            $("#txtComments").val("");

            // Invalidate the rows
            grid.invalidateAllRows();
            initGridData(GetEmptyRows([]));

            // get the latest available document number
            getLatestDocNum();
            $("#txtDocName").focus();
        };

        // Get the latest document number
        var getLatestDocNum = function () {
            $.ajax({
                url: '/GridStock/GetLatestDocName',
                type: 'GET',
                data: { Type: 2 },
                success: function (res) {
                    if (res) {
                        $("#txtDocName").val(res);
                    }
                },
                beforeSend: function () {
                    $("#ajaxLoadingImg").show();
                },
                complete: function () { $("#ajaxLoadingImg").hide(); },
                error: function (e) {

                }
            });
        }


        var getDataObject = function () {
            var xmlString="";

            if(validateHeaderFields()){
                xmlString = "<Root>";
                var gridData = _.filter(dataView.getItems(), function(item){ return  !(item.pid == undefined || item.pid=="") });

                if (gridData == undefined || gridData.length==0) {
                    customAlert('Please select atleast one Product at Row 1', 'alert');
                    return false;
                }

                for (var i = 0; i < gridData.length; i++) {
                    if (gridData[i].pid != ""
                        && (gridData[i].quantity == null || gridData[i].quantity == "" || gridData[i].quantity==0
                            || gridData[i].price == null || gridData[i].price == "" || gridData[i].price==0  )) {
                        customAlert("Please enter Quantity and Unit Price at Row" + (gridData[i].sno), 'alert');
                        return false;
                        break;
                    }
                    else {
                        xmlString += "<Child PID=\"" + gridData[i].pid + "\" QTY=\"" + gridData[i].quantity + "\" UnitPrice=\"" + gridData[i].price
                                        + "\"  Discount=\"" + gridData[i].discount + "\"  TotalPrice=\"" + gridData[i].totalPrice + "\" />";
                    }
                }
                xmlString += "</Root>";


                return {
                    DocID: $("#DocID").val(),
                    DocName: $("#txtDocName").val(),
                    DocDate: $("#dtDate").val(),

                    WareHouseId: $("#drpWarehouse").combogrid('getValue'),
                    WareHouseName: $("#drpWarehouse").combogrid('getText'),

                    VendorId: $("#drpVendor").combogrid('getValue'),
                    VendorName: $("#drpVendor").combogrid('getText'),

                    IsExpected: $('#chkShedule').is(":checked"),
                    EffectiveDate: $("#dtExpDate").val(),
                    Comments: $("#txtComments").val(),
                    GridData: xmlString
                }
            }
            return false;
        };

        var _Save = function () {

            var obj = getDataObject();
            if (typeof (obj) != 'boolean' && typeof (obj) == 'object') {
                $.ajax({
                    url: '/GridStock/SaveDocumentIN',
                    type: 'POST',
                    data: { Data: JSON.stringify(obj) },
                    success: function (res) {
                        if (res != "-494") {
                            customAlert('Document saved as ' + res, 'alert', function () { $("#txtDocName").focus(); 
                                if(parseInt( $("#DocID").val())>0) {
                                    $("#btnNew").trigger("click");
                                }
                                else  {
                                    refreshAsNewDoc();
                                }

                            });
                        }
                        else
                            customAlert('Error occured while saving. Please contact administrator.');
                    },
                    beforeSend: function () {
                        $("#ajaxLoadingImg").show();
                    },
                    complete: function () { $("#ajaxLoadingImg").hide(); },
                    error: function (e) {
                        customAlert('Error in Saving..', 'alert');
                    }
                });
            }
        }

        $("a#btnSave").on("click", function (e) {
            e.preventDefault();
            _Save();
        });

        //btnBack
        $("#btnBack").on("click", function (e) {
            e.preventDefault();
            _back();
        });

        //btnPrev
        $("#btnPrev").on("click", function (e) {
            e.preventDefault();
            _previousDoc();
        });
        //btnNext
        $("#btnNext").on("click", function (e) {
            e.preventDefault();
            _nextDoc();
        });
        //btnBack
        $("#btnNew").on("click", function (e) {
            e.preventDefault();
            _newDoc();
        });

        var _back = function () {
            window.location.href = "/GridStock/InwardStock";
        }

        var _previousDoc = function () {
            var url = '@Url.Action("GetNextPrevDoc", "GridStock", new { _Action = "prev", DocType = 2, DocNo = Model.DocID })';
            window.location.href = url.replace(/&amp;/gi, '&');
        }
        var _nextDoc = function () {
            var url = '@Url.Action("GetNextPrevDoc", "GridStock", new { _Action = "next", DocType = 2, DocNo = Model.DocID })';
            window.location.href = url.replace(/&amp;/gi, '&');
        }
        var _newDoc = function () {
            window.location.href = '@Url.Action("AddInStock", "GridStock")';
        }

        Mousetrap.bind(['ctrl+s', 'command+s'], function (e) {
            e.preventDefault();
            _Save();
        });

        Mousetrap.bind(['ctrl+backspace'], function (e) {
            e.preventDefault();
            _back();
        });

        Mousetrap.bind(['ctrl+up'], function (e) {

            e.preventDefault();
            _newDoc();
        });
        Mousetrap.bind(['ctrl+left'], function (e) {

            e.preventDefault();
            _previousDoc();
        });
        Mousetrap.bind(['ctrl+right'], function (e) {
            e.preventDefault();
            _nextDoc();
        });


        $("#txtDocName").focus();
    });
</script>
