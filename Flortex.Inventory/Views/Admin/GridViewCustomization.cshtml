@using MAP.Inventory.ModelImple;
@using MAP.Inventory.Model;
@{
    ViewBag.Title = "GridViewCustomization";

    MapGridViewImple objGridView = new MapGridViewImple(0);
    Dictionary<int, string> items = objGridView.GetGridViewNames();
    int[] keys = items.Keys.ToArray();

    SessionManager objSession = null;
    if (Session["SessionManager"] != null)
    {
        objSession = (SessionManager)Session["SessionManager"];
    }
}

<form role="search" id="frmGridViewsCustomization" class="cmxform">
    <div class="row-fluid heading">
        <div class="span12">
            <h2 class="pull-left">Grid Views</h2>

            <div class="pull-right">
                @if (objSession.RoleFeatures != null && objSession.RoleFeatures.ContainsKey("Gridview_Save") && objSession.RoleFeatures["Gridview_Save"])
                {
                    <a id="btnSave" class="btn btn-default">Save</a>
                }

                @if (objSession.RoleFeatures != null && objSession.RoleFeatures.ContainsKey("Gridview_Clear") && objSession.RoleFeatures["Gridview_Clear"])
                {
                    <a id="btnClear" class="btn btn-default">Clear</a>
                }

                @if (objSession.RoleFeatures != null && objSession.RoleFeatures.ContainsKey("Gridview_Add") && objSession.RoleFeatures["Gridview_Add"])
                {
                    <a id="btnAddRow" class="btn btn-default pull-right">Add</a>
                }
            </div>
        </div>
    </div>

    <div class="row-fluid">
        <div class="span2">
            <label for="txtCode" class="label1">Grid View Names</label>
        </div>
        <div class="span8">
            <select class="form-control mousetrap" id="drpGridViews">
                <option value="0">-------- select Name -------- </option>
                @if (keys != null && keys.Length > 0)
                {
                    for (int i = 0; i < keys.Length; i++)
                    {

                <option value="@keys[i].ToString()"> @items[keys[i]]</option>
                    }
                }

            </select>
        </div>
    </div>

    <div class="row-fluid">
        <div class="span6">
            <label for="txtCode" class="label1">Total rows</label>
            <input type="text" class="form-control mousetrap" name="txtTotalRows" id="txtTotalRows" placeholder="Default rows is 20">
        </div>
        <div class="span6">
            <label for="txtCode" class="label1">Grid Height</label>
            <input type="text" class="form-control mousetrap" name="txtPanelWidth" id="txtHeight" placeholder="Default panel width is 500">
        </div>
    </div>

    <div class="row-fluid" style="padding-top:50px;">

        <div class="span12">
            <table class="table" id="tblGridData">
                <thead>
                    <tr>
                        <th>Field Name</th>
                        <th>Field Text</th>
                        <th>Show Totals</th>
                        <th>Editor Type</th>
                        <th>Width</th>
                        <th>Formula</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <script type="text/javascript">

        $(function () {
            var originalModel = {};
            var originalData = [];
            var drpGridViews = $("#drpGridViews");


            // dropdown change logic
            drpGridViews.on('change', function (e) {

                e.preventDefault();
                clearControls();
                getScreenData();
            });

            // load the data with the controls
            var getScreenData = function () {
                var _FeatureId = drpGridViews.val();
                if (_FeatureId > 0) {
                    $.ajax({
                        url: '/Admin/GetGridViewCustomizationData',
                        type: 'GET',
                        data: { FeatureId: _FeatureId },
                        success: function (res) {

                            if (res) {
                                originalModel = $.parseJSON(res);
                                populateModelData(originalModel);
                            }

                        },
                        beforeSend: function () {
                            loadAjaxImg(true);
                        },
                        complete: function () { loadAjaxImg(false); },
                        error: function (e) {
                            customAlert('Error in Saving..', 'alert');
                        }
                    });
                }

            };

            // load the data based on dropdown selection
            var populateModelData = function (model) {
                if (model) {
                    // header fields
                    if (model.TotalRows)
                        $("#txtTotalRows").val(model.TotalRows);

                    if (model.Height)
                        $("#txtHeight").val(model.Height);

                    var gridData = JSON.parse(model.Columns);
                    $.extend(true, originalData, gridData);
                    if (gridData && gridData.length) {
                        var tr = '';

                        for (var i = 0; i < gridData.length; i++) {

                            tr += ' <tr data-field="' + gridData[i].field + '"  data-newlyadded="false"  data-row="' + i + '"> ';

                            // first cell
                            if (gridData[i].isStatic === false) {
                                tr += ' <td><input type="text" id="txtField' + i + '" value="' + gridData[i].field + '" placeholder="field shold in small letters with no spaces"/></td>';
                            }
                            else {
                                tr += ' <td>' + gridData[i].field + '</td>';
                            }




                            // second cell
                            tr += ' <td><input type="text" id="txtName' + i + '" value="' + gridData[i].name + '" placeholder="Default name will be field name"/></td>';


                            // // Third cell show totals
                            tr += ' <td><input type="checkbox" id="chkShowTotals' + i + '" class="select_row"';
                            if (gridData[i].hasTotals === true) {
                                tr += 'checked="checked"'
                            }
                            else if (!gridData[i].isDecimal) {
                                tr += 'readonly="readonly" disabled'
                            }

                            tr += '/> </td>';

                            // fourth cell
                            if (gridData[i].isStatic === false) {
                                tr += ' <td>';
                                if (gridData[i].editorTpye == 'Empty') {
                                    tr += ' <select id="drpEditorType' + i + '"><option  val="Empty" selected="selected" >Empty</option>   <option  val="Decimal">Decimal</option></select>';
                                }
                                    //else if (gridData[i].editorTpye == 'String') {
                                    //    tr += ' <select id="drpEditorType' + i + '"><option  val="Empty" selected="selected" >Empty</option>   <option  val="String">String</option><option  val="Decimal">Decimal</option></select>';
                                    //}
                                else if (gridData[i].editorTpye == 'Decimal') {
                                    tr += ' <select id="drpEditorType' + i + '"><option  val="Empty" selected="selected" >Empty</option>   <option  val="Decimal">Decimal</option></select>';
                                }
                                tr += '</td>';
                            }
                            else {
                                tr += '<td></td>';
                            }


                            var _width = gridData[i].width || 100;
                            //  fifth cell
                            tr += ' <td><input type="text" id="txtWidth' + i + '" value="' + _width + '"  placeholder="Default width 100"/></td>';

                            //sixth cell
                            tr += '<td> ';
                            if (gridData[i].formula) {
                                tr += '  <input type="text" id="txtFormula' + i + '" value="' + gridData[i].formula + '"  placeholder="Formula"/> ';
                            }
                            tr += ' </td>';

                            // seventh cell
                            if (gridData[i].isStatic === false) {
                                tr += ' <td><a href="javascript:void(0);"  id="btnDelete' + i + '" class="btn btn-default deleteRow" title="Delete"><i class="icon-adt_trash"></i></a></td>';
                            }
                            else {
                                tr += ' <td></td>';
                            }

                            tr += ' </tr>';
                        }

                        $("#tblGridData>tbody").empty().append(tr);
                    }
                }
            }

            // buttons click logic
            $("#btnSave").on('click', function (e) {
                e.preventDefault();
                saveData();
            });

            $("#btnClear").on('click', function (e) {
                e.preventDefault();
                clearControls();
                $("#drpGridViews").val("0");
            });

            // Add dynamic rows
            $("#btnAddRow").on('click', function (e) {
                e.preventDefault();
                addEmptyRow();
            });

            // Delete dynamic rows
            $("#tblGridData").on('click', 'a.deleteRow', function (e) {
                e.preventDefault();
                var self = $(this);
                smoke.confirm("Are you sure, Do you want to delete.?", function (ev) { self.parents('tr').remove(); }, {
                    ok: "Yep",
                    cancel: "Nope",
                    classname: "custom-class",
                    reverseButtons: true
                });

            });

            // clear contorls 1. remove all the options from dropdowns and make the text box value as empty and remove all the rows from the table
            var clearControls = function () {
                // load the header field data
                $("#txtTotalRows").val("");
                $("#txtHeight").val("");
                $("#tblGridData>tbody").empty();


            }

            // add an empty row
            var addEmptyRow = function () {
                if ($("#drpGridViews").val() > 0) {
                    var i = $("#tblGridData>tbody>tr").length;

                    var tr = '<tr data-row="' + i + '" data-newlyadded="true">';

                    // first cell
                    tr += ' <td><input type="text" id="txtField' + i + '" value="" placeholder="field shold in small letters with no spaces"/></td>';

                    // second cell
                    tr += ' <td><input type="text" id="txtName' + i + '" value="" placeholder="Default name will be field name"/></td>';


                    // // Third cell show totals
                    tr += ' <td><input type="checkbox" id="chkShowTotals' + i + '" class="select_row"/> </td>';

                    // fourth cell
                    tr += '<td> <select id="drpEditorType' + i + '"><option  val="Empty" >Empty</option> <option  val="Decimal">Decimal</option></select> </td>';

                    //  fifth cell
                    tr += ' <td><input type="text" id="txtWidth' + i + '" value=""  placeholder="Default width 80"/></td>';

                    //sixth cell
                    tr += '<td>   <input type="text" id="txtFormula' + i + '" value=""  placeholder="Formula"/>   </td>';

                    // seventh cell
                    tr += ' <td><a href="javascript:void(0);"  id="btnDelete' + i + '" class="btn btn-default deleteRow" title="Delete"><i class="icon-adt_trash"></i></a></td>';

                    tr += '</tr>';

                    $("#tblGridData>tbody").append(tr);
                }
            };

            // data save logic
            var saveData = function () {

                buildData();
                $.ajax({
                    url: '/Admin/SaveGridViewCustomization',
                    type: 'POST',
                    data: { model: JSON.stringify(originalModel) },
                    success: function (res) {
                        if (res != "-494") {
                            customAlert('Data saved successfully', 'alert', function () { $("#drpGridViews").focus(); });
                            $("#btnClear").trigger("click");
                        }
                        else
                            customAlert('Error occured while saving. Please contact administrator.');
                    },
                    beforeSend: function () {
                        loadAjaxImg(true);
                    },
                    complete: function () { loadAjaxImg(false); },
                    error: function (e) {
                        customAlert('Error in Saving..', 'alert');
                    }
                });
            };

            //build the data
            var buildData = function () {

                // header fields
                originalModel.TotalRows = $("#txtTotalRows").val() ? parseInt($("#txtTotalRows").val()) : 20;
                originalModel.Height = $("#txtHeight").val() ? parseInt($("#txtHeight").val()) : 500;
                originalData.splice(6, originalData.length - 6);
                // table fields (bind column properties)
                $("#tblGridData>tbody>tr").each(function (i, tr) {

                    var txtName = $(tr).find('#txtName' + i);
                    var showTotals = $(tr).find('#chkShowTotals' + i);
                    var txtWidth = $(tr).find('#txtWidth' + i);

                    var txtField = $(tr).find('#txtField' + i);
                    var txtFormula = $(tr).find('#txtFormula' + i);
                    var drpEditorType = $(tr).find('#drpEditorType' + i);

                    if (originalData[i] && $(tr).attr("data-field") == originalData[i].field && $(tr).attr("data-newlyadded") == "false" && i == $(tr).attr("data-row") && !(originalData[i].isStatic === false)) {
                        originalData[i].hasTotals = showTotals.attr("checked") == "checked" ? true : false;
                        originalData[i].name = txtName.val() ? txtName.val() : originalData[i].name;
                        originalData[i].width = txtWidth.val() ? txtWidth.val() : 100;
                    }
                    else if (txtName.val() != "" && txtField.val() != "" && txtFormula.val() != "") {
                        var rowItem = {};
                        rowItem.isStatic = false;
                        rowItem.isFormula = true;
                        rowItem.isDecimal = true;

                        rowItem.hasTotals = showTotals.attr("checked") == "checked" ? true : false;
                        rowItem.name = txtName.val() ? txtName.val() : "";
                        rowItem.width = txtWidth.val() ? txtWidth.val() : 100;

                        rowItem.field = txtField.val() ? txtField.val() : "";
                        rowItem.id = txtField.val() ? txtField.val() : "";

                        rowItem.formula = txtFormula.val() ? txtFormula.val() : "";
                        rowItem.editorTpye = drpEditorType.val();

                        if (drpEditorType.val() === "Empty") {
                            rowItem.formatter = "Slick.Formatters.Decimal";

                        }
                        else if (drpEditorType.val() === "Decimal") {
                            rowItem.editor = "Slick.Editors.Text";
                            rowItem.formatter = "Slick.Formatters.Decimal";
                            rowItem.validator = "Slick.Validator.Decimal";
                        }

                        originalData.push(rowItem);
                    }
                });

                originalModel.Columns = JSON.stringify(originalData);
            };
        });

    </script>
</form>
